//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OneShot.com.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Promotion", Namespace="http://schemas.datacontract.org/2004/07/Cyber_Knights_Service")]
    [System.SerializableAttribute()]
    public partial class Promotion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PromotioPercentageOFFField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PromotionStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Promotion_DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime Promotion_EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Promotion_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Promotion_NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime Promotion_StartDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PromotioPercentageOFF {
            get {
                return this.PromotioPercentageOFFField;
            }
            set {
                if ((this.PromotioPercentageOFFField.Equals(value) != true)) {
                    this.PromotioPercentageOFFField = value;
                    this.RaisePropertyChanged("PromotioPercentageOFF");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PromotionStatus {
            get {
                return this.PromotionStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.PromotionStatusField, value) != true)) {
                    this.PromotionStatusField = value;
                    this.RaisePropertyChanged("PromotionStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Promotion_Description {
            get {
                return this.Promotion_DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.Promotion_DescriptionField, value) != true)) {
                    this.Promotion_DescriptionField = value;
                    this.RaisePropertyChanged("Promotion_Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Promotion_EndDate {
            get {
                return this.Promotion_EndDateField;
            }
            set {
                if ((this.Promotion_EndDateField.Equals(value) != true)) {
                    this.Promotion_EndDateField = value;
                    this.RaisePropertyChanged("Promotion_EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Promotion_ID {
            get {
                return this.Promotion_IDField;
            }
            set {
                if ((this.Promotion_IDField.Equals(value) != true)) {
                    this.Promotion_IDField = value;
                    this.RaisePropertyChanged("Promotion_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Promotion_Name {
            get {
                return this.Promotion_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Promotion_NameField, value) != true)) {
                    this.Promotion_NameField = value;
                    this.RaisePropertyChanged("Promotion_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Promotion_StartDate {
            get {
                return this.Promotion_StartDateField;
            }
            set {
                if ((this.Promotion_StartDateField.Equals(value) != true)) {
                    this.Promotion_StartDateField = value;
                    this.RaisePropertyChanged("Promotion_StartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemOnPromotion", Namespace="http://schemas.datacontract.org/2004/07/Cyber_Knights_Service")]
    [System.SerializableAttribute()]
    public partial class ItemOnPromotion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ItemCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Promotion_IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ItemCode {
            get {
                return this.ItemCodeField;
            }
            set {
                if ((this.ItemCodeField.Equals(value) != true)) {
                    this.ItemCodeField = value;
                    this.RaisePropertyChanged("ItemCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Promotion_ID {
            get {
                return this.Promotion_IDField;
            }
            set {
                if ((this.Promotion_IDField.Equals(value) != true)) {
                    this.Promotion_IDField = value;
                    this.RaisePropertyChanged("Promotion_ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryTbl", Namespace="http://schemas.datacontract.org/2004/07/Cyber_Knights_Service")]
    [System.SerializableAttribute()]
    public partial class CategoryTbl : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CatIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Cat_NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CatID {
            get {
                return this.CatIDField;
            }
            set {
                if ((this.CatIDField.Equals(value) != true)) {
                    this.CatIDField = value;
                    this.RaisePropertyChanged("CatID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cat_Name {
            get {
                return this.Cat_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Cat_NameField, value) != true)) {
                    this.Cat_NameField = value;
                    this.RaisePropertyChanged("Cat_Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PromoCode", Namespace="http://schemas.datacontract.org/2004/07/Cyber_Knights_Service")]
    [System.SerializableAttribute()]
    public partial class PromoCode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DiscountPercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string codeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DiscountPercent {
            get {
                return this.DiscountPercentField;
            }
            set {
                if ((this.DiscountPercentField.Equals(value) != true)) {
                    this.DiscountPercentField = value;
                    this.RaisePropertyChanged("DiscountPercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string code {
            get {
                return this.codeField;
            }
            set {
                if ((object.ReferenceEquals(this.codeField, value) != true)) {
                    this.codeField = value;
                    this.RaisePropertyChanged("code");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Item", Namespace="http://schemas.datacontract.org/2004/07/Cyber_Knights_Service")]
    [System.SerializableAttribute()]
    public partial class Item : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CatIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ItemAvailableQTYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ItemCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemImageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ItemPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ItemQuantityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CatID {
            get {
                return this.CatIDField;
            }
            set {
                if ((this.CatIDField.Equals(value) != true)) {
                    this.CatIDField = value;
                    this.RaisePropertyChanged("CatID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ItemAvailableQTY {
            get {
                return this.ItemAvailableQTYField;
            }
            set {
                if ((this.ItemAvailableQTYField.Equals(value) != true)) {
                    this.ItemAvailableQTYField = value;
                    this.RaisePropertyChanged("ItemAvailableQTY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ItemCode {
            get {
                return this.ItemCodeField;
            }
            set {
                if ((this.ItemCodeField.Equals(value) != true)) {
                    this.ItemCodeField = value;
                    this.RaisePropertyChanged("ItemCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemDescription {
            get {
                return this.ItemDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemDescriptionField, value) != true)) {
                    this.ItemDescriptionField = value;
                    this.RaisePropertyChanged("ItemDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemImageUrl {
            get {
                return this.ItemImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemImageUrlField, value) != true)) {
                    this.ItemImageUrlField = value;
                    this.RaisePropertyChanged("ItemImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemName {
            get {
                return this.ItemNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemNameField, value) != true)) {
                    this.ItemNameField = value;
                    this.RaisePropertyChanged("ItemName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ItemPrice {
            get {
                return this.ItemPriceField;
            }
            set {
                if ((this.ItemPriceField.Equals(value) != true)) {
                    this.ItemPriceField = value;
                    this.RaisePropertyChanged("ItemPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ItemQuantity {
            get {
                return this.ItemQuantityField;
            }
            set {
                if ((this.ItemQuantityField.Equals(value) != true)) {
                    this.ItemQuantityField = value;
                    this.RaisePropertyChanged("ItemQuantity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Cyber_Knights_Service")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateRegisteredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FiratNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserContactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateRegistered {
            get {
                return this.DateRegisteredField;
            }
            set {
                if ((this.DateRegisteredField.Equals(value) != true)) {
                    this.DateRegisteredField = value;
                    this.RaisePropertyChanged("DateRegistered");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FiratName {
            get {
                return this.FiratNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FiratNameField, value) != true)) {
                    this.FiratNameField = value;
                    this.RaisePropertyChanged("FiratName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserAddress {
            get {
                return this.UserAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.UserAddressField, value) != true)) {
                    this.UserAddressField = value;
                    this.RaisePropertyChanged("UserAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserCity {
            get {
                return this.UserCityField;
            }
            set {
                if ((object.ReferenceEquals(this.UserCityField, value) != true)) {
                    this.UserCityField = value;
                    this.RaisePropertyChanged("UserCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserContact {
            get {
                return this.UserContactField;
            }
            set {
                if ((object.ReferenceEquals(this.UserContactField, value) != true)) {
                    this.UserContactField = value;
                    this.RaisePropertyChanged("UserContact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserEmail {
            get {
                return this.UserEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.UserEmailField, value) != true)) {
                    this.UserEmailField = value;
                    this.RaisePropertyChanged("UserEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserPassword {
            get {
                return this.UserPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.UserPasswordField, value) != true)) {
                    this.UserPasswordField = value;
                    this.RaisePropertyChanged("UserPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserType {
            get {
                return this.UserTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.UserTypeField, value) != true)) {
                    this.UserTypeField = value;
                    this.RaisePropertyChanged("UserType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LineGraphData", Namespace="http://schemas.datacontract.org/2004/07/Cyber_Knights_Service")]
    [System.SerializableAttribute()]
    public partial class LineGraphData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ExpenseAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal RevenuAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ExpenseAmount {
            get {
                return this.ExpenseAmountField;
            }
            set {
                if ((this.ExpenseAmountField.Equals(value) != true)) {
                    this.ExpenseAmountField = value;
                    this.RaisePropertyChanged("ExpenseAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mon {
            get {
                return this.MonField;
            }
            set {
                if ((object.ReferenceEquals(this.MonField, value) != true)) {
                    this.MonField = value;
                    this.RaisePropertyChanged("Mon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal RevenuAmount {
            get {
                return this.RevenuAmountField;
            }
            set {
                if ((this.RevenuAmountField.Equals(value) != true)) {
                    this.RevenuAmountField = value;
                    this.RaisePropertyChanged("RevenuAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PieChartData", Namespace="http://schemas.datacontract.org/2004/07/Cyber_Knights_Service")]
    [System.SerializableAttribute()]
    public partial class PieChartData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CatIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SalePercentageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int dataIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CatID {
            get {
                return this.CatIDField;
            }
            set {
                if ((this.CatIDField.Equals(value) != true)) {
                    this.CatIDField = value;
                    this.RaisePropertyChanged("CatID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SalePercentage {
            get {
                return this.SalePercentageField;
            }
            set {
                if ((this.SalePercentageField.Equals(value) != true)) {
                    this.SalePercentageField = value;
                    this.RaisePropertyChanged("SalePercentage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int dataId {
            get {
                return this.dataIdField;
            }
            set {
                if ((this.dataIdField.Equals(value) != true)) {
                    this.dataIdField = value;
                    this.RaisePropertyChanged("dataId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ColumnGraphData", Namespace="http://schemas.datacontract.org/2004/07/Cyber_Knights_Service")]
    [System.SerializableAttribute()]
    public partial class ColumnGraphData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RegisteredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VisitorsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mon {
            get {
                return this.MonField;
            }
            set {
                if ((object.ReferenceEquals(this.MonField, value) != true)) {
                    this.MonField = value;
                    this.RaisePropertyChanged("Mon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Ordered {
            get {
                return this.OrderedField;
            }
            set {
                if ((this.OrderedField.Equals(value) != true)) {
                    this.OrderedField = value;
                    this.RaisePropertyChanged("Ordered");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Registered {
            get {
                return this.RegisteredField;
            }
            set {
                if ((this.RegisteredField.Equals(value) != true)) {
                    this.RegisteredField = value;
                    this.RaisePropertyChanged("Registered");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Visitors {
            get {
                return this.VisitorsField;
            }
            set {
                if ((this.VisitorsField.Equals(value) != true)) {
                    this.VisitorsField = value;
                    this.RaisePropertyChanged("Visitors");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemReview", Namespace="http://schemas.datacontract.org/2004/07/Cyber_Knights_Service")]
    [System.SerializableAttribute()]
    public partial class ItemReview : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ItemCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReviewDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int revIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string reviewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int starsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ItemCode {
            get {
                return this.ItemCodeField;
            }
            set {
                if ((this.ItemCodeField.Equals(value) != true)) {
                    this.ItemCodeField = value;
                    this.RaisePropertyChanged("ItemCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReviewDate {
            get {
                return this.ReviewDateField;
            }
            set {
                if ((this.ReviewDateField.Equals(value) != true)) {
                    this.ReviewDateField = value;
                    this.RaisePropertyChanged("ReviewDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int revId {
            get {
                return this.revIdField;
            }
            set {
                if ((this.revIdField.Equals(value) != true)) {
                    this.revIdField = value;
                    this.RaisePropertyChanged("revId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string review {
            get {
                return this.reviewField;
            }
            set {
                if ((object.ReferenceEquals(this.reviewField, value) != true)) {
                    this.reviewField = value;
                    this.RaisePropertyChanged("review");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int stars {
            get {
                return this.starsField;
            }
            set {
                if ((this.starsField.Equals(value) != true)) {
                    this.starsField = value;
                    this.RaisePropertyChanged("stars");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomerList", Namespace="http://schemas.datacontract.org/2004/07/Cyber_Knights_Service")]
    [System.SerializableAttribute()]
    public partial class CustomerList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ItemCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ItemCode {
            get {
                return this.ItemCodeField;
            }
            set {
                if ((this.ItemCodeField.Equals(value) != true)) {
                    this.ItemCodeField = value;
                    this.RaisePropertyChanged("ItemCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="onCart", Namespace="http://schemas.datacontract.org/2004/07/Cyber_Knights_Service")]
    [System.SerializableAttribute()]
    public partial class onCart : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ItemCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal itemTotalPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int qtyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ItemCode {
            get {
                return this.ItemCodeField;
            }
            set {
                if ((this.ItemCodeField.Equals(value) != true)) {
                    this.ItemCodeField = value;
                    this.RaisePropertyChanged("ItemCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal itemTotalPrice {
            get {
                return this.itemTotalPriceField;
            }
            set {
                if ((this.itemTotalPriceField.Equals(value) != true)) {
                    this.itemTotalPriceField = value;
                    this.RaisePropertyChanged("itemTotalPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int qty {
            get {
                return this.qtyField;
            }
            set {
                if ((this.qtyField.Equals(value) != true)) {
                    this.qtyField = value;
                    this.RaisePropertyChanged("qty");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/Cyber_Knights_Service")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime OrderDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderEstDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OrderDate {
            get {
                return this.OrderDateField;
            }
            set {
                if ((this.OrderDateField.Equals(value) != true)) {
                    this.OrderDateField = value;
                    this.RaisePropertyChanged("OrderDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderEstDate {
            get {
                return this.OrderEstDateField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderEstDateField, value) != true)) {
                    this.OrderEstDateField = value;
                    this.RaisePropertyChanged("OrderEstDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderID {
            get {
                return this.OrderIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderIDField, value) != true)) {
                    this.OrderIDField = value;
                    this.RaisePropertyChanged("OrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderStatus {
            get {
                return this.OrderStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderStatusField, value) != true)) {
                    this.OrderStatusField = value;
                    this.RaisePropertyChanged("OrderStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Transaction", Namespace="http://schemas.datacontract.org/2004/07/Cyber_Knights_Service")]
    [System.SerializableAttribute()]
    public partial class Transaction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TransactionAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransactionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TransactionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransactionReciptField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfItems {
            get {
                return this.NumberOfItemsField;
            }
            set {
                if ((this.NumberOfItemsField.Equals(value) != true)) {
                    this.NumberOfItemsField = value;
                    this.RaisePropertyChanged("NumberOfItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderID {
            get {
                return this.OrderIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderIDField, value) != true)) {
                    this.OrderIDField = value;
                    this.RaisePropertyChanged("OrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TransactionAmount {
            get {
                return this.TransactionAmountField;
            }
            set {
                if ((this.TransactionAmountField.Equals(value) != true)) {
                    this.TransactionAmountField = value;
                    this.RaisePropertyChanged("TransactionAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransactionDate {
            get {
                return this.TransactionDateField;
            }
            set {
                if ((object.ReferenceEquals(this.TransactionDateField, value) != true)) {
                    this.TransactionDateField = value;
                    this.RaisePropertyChanged("TransactionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TransactionId {
            get {
                return this.TransactionIdField;
            }
            set {
                if ((this.TransactionIdField.Equals(value) != true)) {
                    this.TransactionIdField = value;
                    this.RaisePropertyChanged("TransactionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransactionRecipt {
            get {
                return this.TransactionReciptField;
            }
            set {
                if ((object.ReferenceEquals(this.TransactionReciptField, value) != true)) {
                    this.TransactionReciptField = value;
                    this.RaisePropertyChanged("TransactionRecipt");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomerMessage", Namespace="http://schemas.datacontract.org/2004/07/Cyber_Knights_Service")]
    [System.SerializableAttribute()]
    public partial class CustomerMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime MessageDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MessageIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MessageDate {
            get {
                return this.MessageDateField;
            }
            set {
                if ((this.MessageDateField.Equals(value) != true)) {
                    this.MessageDateField = value;
                    this.RaisePropertyChanged("MessageDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MessageID {
            get {
                return this.MessageIDField;
            }
            set {
                if ((this.MessageIDField.Equals(value) != true)) {
                    this.MessageIDField = value;
                    this.RaisePropertyChanged("MessageID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageStatus {
            get {
                return this.MessageStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageStatusField, value) != true)) {
                    this.MessageStatusField = value;
                    this.RaisePropertyChanged("MessageStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageText {
            get {
                return this.MessageTextField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageTextField, value) != true)) {
                    this.MessageTextField = value;
                    this.RaisePropertyChanged("MessageText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IOneShotService")]
    public interface IOneShotService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetPromoByID", ReplyAction="http://tempuri.org/IOneShotService/GetPromoByIDResponse")]
        OneShot.com.ServiceReference1.Promotion GetPromoByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetPromoByID", ReplyAction="http://tempuri.org/IOneShotService/GetPromoByIDResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Promotion> GetPromoByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/deleteItemFromDB", ReplyAction="http://tempuri.org/IOneShotService/deleteItemFromDBResponse")]
        bool deleteItemFromDB(int itemcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/deleteItemFromDB", ReplyAction="http://tempuri.org/IOneShotService/deleteItemFromDBResponse")]
        System.Threading.Tasks.Task<bool> deleteItemFromDBAsync(int itemcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/getItemOnPromobyCode", ReplyAction="http://tempuri.org/IOneShotService/getItemOnPromobyCodeResponse")]
        OneShot.com.ServiceReference1.ItemOnPromotion getItemOnPromobyCode(int itemCode, int promoid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/getItemOnPromobyCode", ReplyAction="http://tempuri.org/IOneShotService/getItemOnPromobyCodeResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.ItemOnPromotion> getItemOnPromobyCodeAsync(int itemCode, int promoid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/removeFromPromo", ReplyAction="http://tempuri.org/IOneShotService/removeFromPromoResponse")]
        bool removeFromPromo(int itemCode, int promoid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/removeFromPromo", ReplyAction="http://tempuri.org/IOneShotService/removeFromPromoResponse")]
        System.Threading.Tasks.Task<bool> removeFromPromoAsync(int itemCode, int promoid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/DeletePromotion", ReplyAction="http://tempuri.org/IOneShotService/DeletePromotionResponse")]
        bool DeletePromotion(int promoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/DeletePromotion", ReplyAction="http://tempuri.org/IOneShotService/DeletePromotionResponse")]
        System.Threading.Tasks.Task<bool> DeletePromotionAsync(int promoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/getCatByID", ReplyAction="http://tempuri.org/IOneShotService/getCatByIDResponse")]
        OneShot.com.ServiceReference1.CategoryTbl getCatByID(int catID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/getCatByID", ReplyAction="http://tempuri.org/IOneShotService/getCatByIDResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.CategoryTbl> getCatByIDAsync(int catID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/getPromoCode", ReplyAction="http://tempuri.org/IOneShotService/getPromoCodeResponse")]
        OneShot.com.ServiceReference1.PromoCode getPromoCode(string PromoCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/getPromoCode", ReplyAction="http://tempuri.org/IOneShotService/getPromoCodeResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.PromoCode> getPromoCodeAsync(string PromoCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/deletUser", ReplyAction="http://tempuri.org/IOneShotService/deletUserResponse")]
        bool deletUser(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/deletUser", ReplyAction="http://tempuri.org/IOneShotService/deletUserResponse")]
        System.Threading.Tasks.Task<bool> deletUserAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItems", ReplyAction="http://tempuri.org/IOneShotService/GetItemsResponse")]
        OneShot.com.ServiceReference1.Item[] GetItems();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItems", ReplyAction="http://tempuri.org/IOneShotService/GetItemsResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Item[]> GetItemsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItem", ReplyAction="http://tempuri.org/IOneShotService/GetItemResponse")]
        OneShot.com.ServiceReference1.Item GetItem(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItem", ReplyAction="http://tempuri.org/IOneShotService/GetItemResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Item> GetItemAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetUser", ReplyAction="http://tempuri.org/IOneShotService/GetUserResponse")]
        OneShot.com.ServiceReference1.User GetUser(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetUser", ReplyAction="http://tempuri.org/IOneShotService/GetUserResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.User> GetUserAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetUsers", ReplyAction="http://tempuri.org/IOneShotService/GetUsersResponse")]
        OneShot.com.ServiceReference1.User[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetUsers", ReplyAction="http://tempuri.org/IOneShotService/GetUsersResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.User[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/Login", ReplyAction="http://tempuri.org/IOneShotService/LoginResponse")]
        OneShot.com.ServiceReference1.User Login(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/Login", ReplyAction="http://tempuri.org/IOneShotService/LoginResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.User> LoginAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/RegisterUser", ReplyAction="http://tempuri.org/IOneShotService/RegisterUserResponse")]
        bool RegisterUser(string userID, string firstname, string userlastname, string email, string Contact, string city, string userAddress, string UserType, string password, string registrationDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/RegisterUser", ReplyAction="http://tempuri.org/IOneShotService/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string userID, string firstname, string userlastname, string email, string Contact, string city, string userAddress, string UserType, string password, string registrationDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItembyCategory", ReplyAction="http://tempuri.org/IOneShotService/GetItembyCategoryResponse")]
        OneShot.com.ServiceReference1.Item[] GetItembyCategory(string CatName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItembyCategory", ReplyAction="http://tempuri.org/IOneShotService/GetItembyCategoryResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Item[]> GetItembyCategoryAsync(string CatName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddItem", ReplyAction="http://tempuri.org/IOneShotService/AddItemResponse")]
        bool AddItem(string itemName, double itemPrice, string categoryName, string itemDescription, int itemQuantity, string itemImage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddItem", ReplyAction="http://tempuri.org/IOneShotService/AddItemResponse")]
        System.Threading.Tasks.Task<bool> AddItemAsync(string itemName, double itemPrice, string categoryName, string itemDescription, int itemQuantity, string itemImage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddLineGraphInfor", ReplyAction="http://tempuri.org/IOneShotService/AddLineGraphInforResponse")]
        bool AddLineGraphInfor(double RevenuAmount, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddLineGraphInfor", ReplyAction="http://tempuri.org/IOneShotService/AddLineGraphInforResponse")]
        System.Threading.Tasks.Task<bool> AddLineGraphInforAsync(double RevenuAmount, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddPieChart", ReplyAction="http://tempuri.org/IOneShotService/AddPieChartResponse")]
        bool AddPieChart(int CatId, double Percentage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddPieChart", ReplyAction="http://tempuri.org/IOneShotService/AddPieChartResponse")]
        System.Threading.Tasks.Task<bool> AddPieChartAsync(int CatId, double Percentage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetLineGraphData", ReplyAction="http://tempuri.org/IOneShotService/GetLineGraphDataResponse")]
        OneShot.com.ServiceReference1.LineGraphData[] GetLineGraphData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetLineGraphData", ReplyAction="http://tempuri.org/IOneShotService/GetLineGraphDataResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.LineGraphData[]> GetLineGraphDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetPieChartData", ReplyAction="http://tempuri.org/IOneShotService/GetPieChartDataResponse")]
        OneShot.com.ServiceReference1.PieChartData[] GetPieChartData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetPieChartData", ReplyAction="http://tempuri.org/IOneShotService/GetPieChartDataResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.PieChartData[]> GetPieChartDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetColumnGraphData", ReplyAction="http://tempuri.org/IOneShotService/GetColumnGraphDataResponse")]
        OneShot.com.ServiceReference1.ColumnGraphData[] GetColumnGraphData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetColumnGraphData", ReplyAction="http://tempuri.org/IOneShotService/GetColumnGraphDataResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.ColumnGraphData[]> GetColumnGraphDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddPromotion", ReplyAction="http://tempuri.org/IOneShotService/AddPromotionResponse")]
        bool AddPromotion(string Prom_name, string Prom_Description, string startDate, string EndDate, string PromoStatus, int PercOFF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddPromotion", ReplyAction="http://tempuri.org/IOneShotService/AddPromotionResponse")]
        System.Threading.Tasks.Task<bool> AddPromotionAsync(string Prom_name, string Prom_Description, string startDate, string EndDate, string PromoStatus, int PercOFF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetPromotions", ReplyAction="http://tempuri.org/IOneShotService/GetPromotionsResponse")]
        OneShot.com.ServiceReference1.Promotion[] GetPromotions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetPromotions", ReplyAction="http://tempuri.org/IOneShotService/GetPromotionsResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Promotion[]> GetPromotionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetPromotionByName", ReplyAction="http://tempuri.org/IOneShotService/GetPromotionByNameResponse")]
        OneShot.com.ServiceReference1.Promotion GetPromotionByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetPromotionByName", ReplyAction="http://tempuri.org/IOneShotService/GetPromotionByNameResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Promotion> GetPromotionByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItemsByPromo", ReplyAction="http://tempuri.org/IOneShotService/GetItemsByPromoResponse")]
        OneShot.com.ServiceReference1.Item[] GetItemsByPromo(int PromoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItemsByPromo", ReplyAction="http://tempuri.org/IOneShotService/GetItemsByPromoResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Item[]> GetItemsByPromoAsync(int PromoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItemPromo", ReplyAction="http://tempuri.org/IOneShotService/GetItemPromoResponse")]
        OneShot.com.ServiceReference1.ItemOnPromotion GetItemPromo(int PromoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItemPromo", ReplyAction="http://tempuri.org/IOneShotService/GetItemPromoResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.ItemOnPromotion> GetItemPromoAsync(int PromoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddItemOnPromotion", ReplyAction="http://tempuri.org/IOneShotService/AddItemOnPromotionResponse")]
        bool AddItemOnPromotion(int Itemcode, int PromoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddItemOnPromotion", ReplyAction="http://tempuri.org/IOneShotService/AddItemOnPromotionResponse")]
        System.Threading.Tasks.Task<bool> AddItemOnPromotionAsync(int Itemcode, int PromoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/EditPromotionStatus", ReplyAction="http://tempuri.org/IOneShotService/EditPromotionStatusResponse")]
        bool EditPromotionStatus(int PromID, string startdate, string enddate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/EditPromotionStatus", ReplyAction="http://tempuri.org/IOneShotService/EditPromotionStatusResponse")]
        System.Threading.Tasks.Task<bool> EditPromotionStatusAsync(int PromID, string startdate, string enddate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetCategory", ReplyAction="http://tempuri.org/IOneShotService/GetCategoryResponse")]
        OneShot.com.ServiceReference1.CategoryTbl GetCategory(string catName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetCategory", ReplyAction="http://tempuri.org/IOneShotService/GetCategoryResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.CategoryTbl> GetCategoryAsync(string catName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItemOnPromotions", ReplyAction="http://tempuri.org/IOneShotService/GetItemOnPromotionsResponse")]
        OneShot.com.ServiceReference1.ItemOnPromotion[] GetItemOnPromotions(int PromoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItemOnPromotions", ReplyAction="http://tempuri.org/IOneShotService/GetItemOnPromotionsResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.ItemOnPromotion[]> GetItemOnPromotionsAsync(int PromoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/UpdateAddress", ReplyAction="http://tempuri.org/IOneShotService/UpdateAddressResponse")]
        bool UpdateAddress(string userID, string newAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/UpdateAddress", ReplyAction="http://tempuri.org/IOneShotService/UpdateAddressResponse")]
        System.Threading.Tasks.Task<bool> UpdateAddressAsync(string userID, string newAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/addItemReview", ReplyAction="http://tempuri.org/IOneShotService/addItemReviewResponse")]
        bool addItemReview(string userid, int itemcode, string review, string reviewdate, int stars);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/addItemReview", ReplyAction="http://tempuri.org/IOneShotService/addItemReviewResponse")]
        System.Threading.Tasks.Task<bool> addItemReviewAsync(string userid, int itemcode, string review, string reviewdate, int stars);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/ADDNEWReview", ReplyAction="http://tempuri.org/IOneShotService/ADDNEWReviewResponse")]
        bool ADDNEWReview(string userid, int itemcode, string review, string reviewdate, int stars);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/ADDNEWReview", ReplyAction="http://tempuri.org/IOneShotService/ADDNEWReviewResponse")]
        System.Threading.Tasks.Task<bool> ADDNEWReviewAsync(string userid, int itemcode, string review, string reviewdate, int stars);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetReviews", ReplyAction="http://tempuri.org/IOneShotService/GetReviewsResponse")]
        OneShot.com.ServiceReference1.ItemReview[] GetReviews(int itemcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetReviews", ReplyAction="http://tempuri.org/IOneShotService/GetReviewsResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.ItemReview[]> GetReviewsAsync(int itemcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddVisitor", ReplyAction="http://tempuri.org/IOneShotService/AddVisitorResponse")]
        bool AddVisitor(string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddVisitor", ReplyAction="http://tempuri.org/IOneShotService/AddVisitorResponse")]
        System.Threading.Tasks.Task<bool> AddVisitorAsync(string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddRegisteredUser", ReplyAction="http://tempuri.org/IOneShotService/AddRegisteredUserResponse")]
        bool AddRegisteredUser(string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddRegisteredUser", ReplyAction="http://tempuri.org/IOneShotService/AddRegisteredUserResponse")]
        System.Threading.Tasks.Task<bool> AddRegisteredUserAsync(string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddOderedUser", ReplyAction="http://tempuri.org/IOneShotService/AddOderedUserResponse")]
        bool AddOderedUser(string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddOderedUser", ReplyAction="http://tempuri.org/IOneShotService/AddOderedUserResponse")]
        System.Threading.Tasks.Task<bool> AddOderedUserAsync(string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/addItemOnList", ReplyAction="http://tempuri.org/IOneShotService/addItemOnListResponse")]
        bool addItemOnList(int itemcode, string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/addItemOnList", ReplyAction="http://tempuri.org/IOneShotService/addItemOnListResponse")]
        System.Threading.Tasks.Task<bool> addItemOnListAsync(int itemcode, string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetCustomerList", ReplyAction="http://tempuri.org/IOneShotService/GetCustomerListResponse")]
        OneShot.com.ServiceReference1.CustomerList[] GetCustomerList(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetCustomerList", ReplyAction="http://tempuri.org/IOneShotService/GetCustomerListResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.CustomerList[]> GetCustomerListAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/DeletItemONList", ReplyAction="http://tempuri.org/IOneShotService/DeletItemONListResponse")]
        bool DeletItemONList(string userid, int itemcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/DeletItemONList", ReplyAction="http://tempuri.org/IOneShotService/DeletItemONListResponse")]
        System.Threading.Tasks.Task<bool> DeletItemONListAsync(string userid, int itemcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItemOnCust", ReplyAction="http://tempuri.org/IOneShotService/GetItemOnCustResponse")]
        OneShot.com.ServiceReference1.CustomerList GetItemOnCust(string userId, int itemcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItemOnCust", ReplyAction="http://tempuri.org/IOneShotService/GetItemOnCustResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.CustomerList> GetItemOnCustAsync(string userId, int itemcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/DeleteAllOnList", ReplyAction="http://tempuri.org/IOneShotService/DeleteAllOnListResponse")]
        bool DeleteAllOnList(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/DeleteAllOnList", ReplyAction="http://tempuri.org/IOneShotService/DeleteAllOnListResponse")]
        System.Threading.Tasks.Task<bool> DeleteAllOnListAsync(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddCartQty", ReplyAction="http://tempuri.org/IOneShotService/AddCartQtyResponse")]
        bool AddCartQty(int itemCode, string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddCartQty", ReplyAction="http://tempuri.org/IOneShotService/AddCartQtyResponse")]
        System.Threading.Tasks.Task<bool> AddCartQtyAsync(int itemCode, string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/ADDItemWithQTY", ReplyAction="http://tempuri.org/IOneShotService/ADDItemWithQTYResponse")]
        bool ADDItemWithQTY(int itemCode, string userID, int qty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/ADDItemWithQTY", ReplyAction="http://tempuri.org/IOneShotService/ADDItemWithQTYResponse")]
        System.Threading.Tasks.Task<bool> ADDItemWithQTYAsync(int itemCode, string userID, int qty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetOnCart", ReplyAction="http://tempuri.org/IOneShotService/GetOnCartResponse")]
        OneShot.com.ServiceReference1.onCart[] GetOnCart(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetOnCart", ReplyAction="http://tempuri.org/IOneShotService/GetOnCartResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.onCart[]> GetOnCartAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/getItemsonCart", ReplyAction="http://tempuri.org/IOneShotService/getItemsonCartResponse")]
        OneShot.com.ServiceReference1.Item[] getItemsonCart(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/getItemsonCart", ReplyAction="http://tempuri.org/IOneShotService/getItemsonCartResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Item[]> getItemsonCartAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/ReduceItemQTY", ReplyAction="http://tempuri.org/IOneShotService/ReduceItemQTYResponse")]
        bool ReduceItemQTY(int itemCode, int qty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/ReduceItemQTY", ReplyAction="http://tempuri.org/IOneShotService/ReduceItemQTYResponse")]
        System.Threading.Tasks.Task<bool> ReduceItemQTYAsync(int itemCode, int qty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/DeleteItem", ReplyAction="http://tempuri.org/IOneShotService/DeleteItemResponse")]
        bool DeleteItem(int ItemCode, string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/DeleteItem", ReplyAction="http://tempuri.org/IOneShotService/DeleteItemResponse")]
        System.Threading.Tasks.Task<bool> DeleteItemAsync(int ItemCode, string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/RmoveAllFromCart", ReplyAction="http://tempuri.org/IOneShotService/RmoveAllFromCartResponse")]
        bool RmoveAllFromCart(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/RmoveAllFromCart", ReplyAction="http://tempuri.org/IOneShotService/RmoveAllFromCartResponse")]
        System.Threading.Tasks.Task<bool> RmoveAllFromCartAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/MinuesCartQty", ReplyAction="http://tempuri.org/IOneShotService/MinuesCartQtyResponse")]
        bool MinuesCartQty(int ItemCode, string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/MinuesCartQty", ReplyAction="http://tempuri.org/IOneShotService/MinuesCartQtyResponse")]
        System.Threading.Tasks.Task<bool> MinuesCartQtyAsync(int ItemCode, string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItemOnCart", ReplyAction="http://tempuri.org/IOneShotService/GetItemOnCartResponse")]
        OneShot.com.ServiceReference1.onCart GetItemOnCart(string userId, int itemCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItemOnCart", ReplyAction="http://tempuri.org/IOneShotService/GetItemOnCartResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.onCart> GetItemOnCartAsync(string userId, int itemCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetCategorynames", ReplyAction="http://tempuri.org/IOneShotService/GetCategorynamesResponse")]
        string[] GetCategorynames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetCategorynames", ReplyAction="http://tempuri.org/IOneShotService/GetCategorynamesResponse")]
        System.Threading.Tasks.Task<string[]> GetCategorynamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetOrders", ReplyAction="http://tempuri.org/IOneShotService/GetOrdersResponse")]
        OneShot.com.ServiceReference1.Order[] GetOrders(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetOrders", ReplyAction="http://tempuri.org/IOneShotService/GetOrdersResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Order[]> GetOrdersAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddTransaction", ReplyAction="http://tempuri.org/IOneShotService/AddTransactionResponse")]
        bool AddTransaction(string orderID, string TransDate, double AmountPaid, string transRecipt, int numItems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddTransaction", ReplyAction="http://tempuri.org/IOneShotService/AddTransactionResponse")]
        System.Threading.Tasks.Task<bool> AddTransactionAsync(string orderID, string TransDate, double AmountPaid, string transRecipt, int numItems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetUserTransaction", ReplyAction="http://tempuri.org/IOneShotService/GetUserTransactionResponse")]
        OneShot.com.ServiceReference1.Transaction GetUserTransaction(string orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetUserTransaction", ReplyAction="http://tempuri.org/IOneShotService/GetUserTransactionResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Transaction> GetUserTransactionAsync(string orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetTransactions", ReplyAction="http://tempuri.org/IOneShotService/GetTransactionsResponse")]
        OneShot.com.ServiceReference1.Transaction[] GetTransactions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetTransactions", ReplyAction="http://tempuri.org/IOneShotService/GetTransactionsResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Transaction[]> GetTransactionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddOrder", ReplyAction="http://tempuri.org/IOneShotService/AddOrderResponse")]
        bool AddOrder(string OrderID, string userID, string orderDate, string EstimatedDelDate, string orderStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddOrder", ReplyAction="http://tempuri.org/IOneShotService/AddOrderResponse")]
        System.Threading.Tasks.Task<bool> AddOrderAsync(string OrderID, string userID, string orderDate, string EstimatedDelDate, string orderStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddItemOnOrder", ReplyAction="http://tempuri.org/IOneShotService/AddItemOnOrderResponse")]
        bool AddItemOnOrder(string OrderID, int itemCode, int qty, double ItemTotal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/AddItemOnOrder", ReplyAction="http://tempuri.org/IOneShotService/AddItemOnOrderResponse")]
        System.Threading.Tasks.Task<bool> AddItemOnOrderAsync(string OrderID, int itemCode, int qty, double ItemTotal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/UpdateOrderStatus", ReplyAction="http://tempuri.org/IOneShotService/UpdateOrderStatusResponse")]
        bool UpdateOrderStatus(string newStatus, string userID, string orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/UpdateOrderStatus", ReplyAction="http://tempuri.org/IOneShotService/UpdateOrderStatusResponse")]
        System.Threading.Tasks.Task<bool> UpdateOrderStatusAsync(string newStatus, string userID, string orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItemsOnOrder", ReplyAction="http://tempuri.org/IOneShotService/GetItemsOnOrderResponse")]
        OneShot.com.ServiceReference1.Item[] GetItemsOnOrder(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItemsOnOrder", ReplyAction="http://tempuri.org/IOneShotService/GetItemsOnOrderResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Item[]> GetItemsOnOrderAsync(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetAllOrders", ReplyAction="http://tempuri.org/IOneShotService/GetAllOrdersResponse")]
        OneShot.com.ServiceReference1.Order[] GetAllOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetAllOrders", ReplyAction="http://tempuri.org/IOneShotService/GetAllOrdersResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Order[]> GetAllOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetOrderByID", ReplyAction="http://tempuri.org/IOneShotService/GetOrderByIDResponse")]
        OneShot.com.ServiceReference1.Order GetOrderByID(string orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetOrderByID", ReplyAction="http://tempuri.org/IOneShotService/GetOrderByIDResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Order> GetOrderByIDAsync(string orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetTransaction", ReplyAction="http://tempuri.org/IOneShotService/GetTransactionResponse")]
        OneShot.com.ServiceReference1.Transaction GetTransaction(string orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetTransaction", ReplyAction="http://tempuri.org/IOneShotService/GetTransactionResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Transaction> GetTransactionAsync(string orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetMessages", ReplyAction="http://tempuri.org/IOneShotService/GetMessagesResponse")]
        OneShot.com.ServiceReference1.CustomerMessage[] GetMessages(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetMessages", ReplyAction="http://tempuri.org/IOneShotService/GetMessagesResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.CustomerMessage[]> GetMessagesAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/NewMessage", ReplyAction="http://tempuri.org/IOneShotService/NewMessageResponse")]
        bool NewMessage(string userID, string message, string sender);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/NewMessage", ReplyAction="http://tempuri.org/IOneShotService/NewMessageResponse")]
        System.Threading.Tasks.Task<bool> NewMessageAsync(string userID, string message, string sender);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/UpdateMessageStatus", ReplyAction="http://tempuri.org/IOneShotService/UpdateMessageStatusResponse")]
        void UpdateMessageStatus(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/UpdateMessageStatus", ReplyAction="http://tempuri.org/IOneShotService/UpdateMessageStatusResponse")]
        System.Threading.Tasks.Task UpdateMessageStatusAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetMessagesDisplay", ReplyAction="http://tempuri.org/IOneShotService/GetMessagesDisplayResponse")]
        OneShot.com.ServiceReference1.CustomerMessage[] GetMessagesDisplay();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetMessagesDisplay", ReplyAction="http://tempuri.org/IOneShotService/GetMessagesDisplayResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.CustomerMessage[]> GetMessagesDisplayAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/ClearList", ReplyAction="http://tempuri.org/IOneShotService/ClearListResponse")]
        bool ClearList(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/ClearList", ReplyAction="http://tempuri.org/IOneShotService/ClearListResponse")]
        System.Threading.Tasks.Task<bool> ClearListAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/IsRegistered", ReplyAction="http://tempuri.org/IOneShotService/IsRegisteredResponse")]
        bool IsRegistered(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/IsRegistered", ReplyAction="http://tempuri.org/IOneShotService/IsRegisteredResponse")]
        System.Threading.Tasks.Task<bool> IsRegisteredAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/UserIDRegistered", ReplyAction="http://tempuri.org/IOneShotService/UserIDRegisteredResponse")]
        bool UserIDRegistered(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/UserIDRegistered", ReplyAction="http://tempuri.org/IOneShotService/UserIDRegisteredResponse")]
        System.Threading.Tasks.Task<bool> UserIDRegisteredAsync(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItemsONcustomerList", ReplyAction="http://tempuri.org/IOneShotService/GetItemsONcustomerListResponse")]
        OneShot.com.ServiceReference1.Item[] GetItemsONcustomerList(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/GetItemsONcustomerList", ReplyAction="http://tempuri.org/IOneShotService/GetItemsONcustomerListResponse")]
        System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Item[]> GetItemsONcustomerListAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/EditPromoStatus", ReplyAction="http://tempuri.org/IOneShotService/EditPromoStatusResponse")]
        bool EditPromoStatus(int promoID, string newS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOneShotService/EditPromoStatus", ReplyAction="http://tempuri.org/IOneShotService/EditPromoStatusResponse")]
        System.Threading.Tasks.Task<bool> EditPromoStatusAsync(int promoID, string newS);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOneShotServiceChannel : OneShot.com.ServiceReference1.IOneShotService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OneShotServiceClient : System.ServiceModel.ClientBase<OneShot.com.ServiceReference1.IOneShotService>, OneShot.com.ServiceReference1.IOneShotService {
        
        public OneShotServiceClient() {
        }
        
        public OneShotServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OneShotServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OneShotServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OneShotServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public OneShot.com.ServiceReference1.Promotion GetPromoByID(int id) {
            return base.Channel.GetPromoByID(id);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Promotion> GetPromoByIDAsync(int id) {
            return base.Channel.GetPromoByIDAsync(id);
        }
        
        public bool deleteItemFromDB(int itemcode) {
            return base.Channel.deleteItemFromDB(itemcode);
        }
        
        public System.Threading.Tasks.Task<bool> deleteItemFromDBAsync(int itemcode) {
            return base.Channel.deleteItemFromDBAsync(itemcode);
        }
        
        public OneShot.com.ServiceReference1.ItemOnPromotion getItemOnPromobyCode(int itemCode, int promoid) {
            return base.Channel.getItemOnPromobyCode(itemCode, promoid);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.ItemOnPromotion> getItemOnPromobyCodeAsync(int itemCode, int promoid) {
            return base.Channel.getItemOnPromobyCodeAsync(itemCode, promoid);
        }
        
        public bool removeFromPromo(int itemCode, int promoid) {
            return base.Channel.removeFromPromo(itemCode, promoid);
        }
        
        public System.Threading.Tasks.Task<bool> removeFromPromoAsync(int itemCode, int promoid) {
            return base.Channel.removeFromPromoAsync(itemCode, promoid);
        }
        
        public bool DeletePromotion(int promoID) {
            return base.Channel.DeletePromotion(promoID);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePromotionAsync(int promoID) {
            return base.Channel.DeletePromotionAsync(promoID);
        }
        
        public OneShot.com.ServiceReference1.CategoryTbl getCatByID(int catID) {
            return base.Channel.getCatByID(catID);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.CategoryTbl> getCatByIDAsync(int catID) {
            return base.Channel.getCatByIDAsync(catID);
        }
        
        public OneShot.com.ServiceReference1.PromoCode getPromoCode(string PromoCode) {
            return base.Channel.getPromoCode(PromoCode);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.PromoCode> getPromoCodeAsync(string PromoCode) {
            return base.Channel.getPromoCodeAsync(PromoCode);
        }
        
        public bool deletUser(string userID) {
            return base.Channel.deletUser(userID);
        }
        
        public System.Threading.Tasks.Task<bool> deletUserAsync(string userID) {
            return base.Channel.deletUserAsync(userID);
        }
        
        public OneShot.com.ServiceReference1.Item[] GetItems() {
            return base.Channel.GetItems();
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Item[]> GetItemsAsync() {
            return base.Channel.GetItemsAsync();
        }
        
        public OneShot.com.ServiceReference1.Item GetItem(int id) {
            return base.Channel.GetItem(id);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Item> GetItemAsync(int id) {
            return base.Channel.GetItemAsync(id);
        }
        
        public OneShot.com.ServiceReference1.User GetUser(string id) {
            return base.Channel.GetUser(id);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.User> GetUserAsync(string id) {
            return base.Channel.GetUserAsync(id);
        }
        
        public OneShot.com.ServiceReference1.User[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.User[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public OneShot.com.ServiceReference1.User Login(string email, string password) {
            return base.Channel.Login(email, password);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.User> LoginAsync(string email, string password) {
            return base.Channel.LoginAsync(email, password);
        }
        
        public bool RegisterUser(string userID, string firstname, string userlastname, string email, string Contact, string city, string userAddress, string UserType, string password, string registrationDate) {
            return base.Channel.RegisterUser(userID, firstname, userlastname, email, Contact, city, userAddress, UserType, password, registrationDate);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string userID, string firstname, string userlastname, string email, string Contact, string city, string userAddress, string UserType, string password, string registrationDate) {
            return base.Channel.RegisterUserAsync(userID, firstname, userlastname, email, Contact, city, userAddress, UserType, password, registrationDate);
        }
        
        public OneShot.com.ServiceReference1.Item[] GetItembyCategory(string CatName) {
            return base.Channel.GetItembyCategory(CatName);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Item[]> GetItembyCategoryAsync(string CatName) {
            return base.Channel.GetItembyCategoryAsync(CatName);
        }
        
        public bool AddItem(string itemName, double itemPrice, string categoryName, string itemDescription, int itemQuantity, string itemImage) {
            return base.Channel.AddItem(itemName, itemPrice, categoryName, itemDescription, itemQuantity, itemImage);
        }
        
        public System.Threading.Tasks.Task<bool> AddItemAsync(string itemName, double itemPrice, string categoryName, string itemDescription, int itemQuantity, string itemImage) {
            return base.Channel.AddItemAsync(itemName, itemPrice, categoryName, itemDescription, itemQuantity, itemImage);
        }
        
        public bool AddLineGraphInfor(double RevenuAmount, string month) {
            return base.Channel.AddLineGraphInfor(RevenuAmount, month);
        }
        
        public System.Threading.Tasks.Task<bool> AddLineGraphInforAsync(double RevenuAmount, string month) {
            return base.Channel.AddLineGraphInforAsync(RevenuAmount, month);
        }
        
        public bool AddPieChart(int CatId, double Percentage) {
            return base.Channel.AddPieChart(CatId, Percentage);
        }
        
        public System.Threading.Tasks.Task<bool> AddPieChartAsync(int CatId, double Percentage) {
            return base.Channel.AddPieChartAsync(CatId, Percentage);
        }
        
        public OneShot.com.ServiceReference1.LineGraphData[] GetLineGraphData() {
            return base.Channel.GetLineGraphData();
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.LineGraphData[]> GetLineGraphDataAsync() {
            return base.Channel.GetLineGraphDataAsync();
        }
        
        public OneShot.com.ServiceReference1.PieChartData[] GetPieChartData() {
            return base.Channel.GetPieChartData();
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.PieChartData[]> GetPieChartDataAsync() {
            return base.Channel.GetPieChartDataAsync();
        }
        
        public OneShot.com.ServiceReference1.ColumnGraphData[] GetColumnGraphData() {
            return base.Channel.GetColumnGraphData();
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.ColumnGraphData[]> GetColumnGraphDataAsync() {
            return base.Channel.GetColumnGraphDataAsync();
        }
        
        public bool AddPromotion(string Prom_name, string Prom_Description, string startDate, string EndDate, string PromoStatus, int PercOFF) {
            return base.Channel.AddPromotion(Prom_name, Prom_Description, startDate, EndDate, PromoStatus, PercOFF);
        }
        
        public System.Threading.Tasks.Task<bool> AddPromotionAsync(string Prom_name, string Prom_Description, string startDate, string EndDate, string PromoStatus, int PercOFF) {
            return base.Channel.AddPromotionAsync(Prom_name, Prom_Description, startDate, EndDate, PromoStatus, PercOFF);
        }
        
        public OneShot.com.ServiceReference1.Promotion[] GetPromotions() {
            return base.Channel.GetPromotions();
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Promotion[]> GetPromotionsAsync() {
            return base.Channel.GetPromotionsAsync();
        }
        
        public OneShot.com.ServiceReference1.Promotion GetPromotionByName(string name) {
            return base.Channel.GetPromotionByName(name);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Promotion> GetPromotionByNameAsync(string name) {
            return base.Channel.GetPromotionByNameAsync(name);
        }
        
        public OneShot.com.ServiceReference1.Item[] GetItemsByPromo(int PromoID) {
            return base.Channel.GetItemsByPromo(PromoID);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Item[]> GetItemsByPromoAsync(int PromoID) {
            return base.Channel.GetItemsByPromoAsync(PromoID);
        }
        
        public OneShot.com.ServiceReference1.ItemOnPromotion GetItemPromo(int PromoID) {
            return base.Channel.GetItemPromo(PromoID);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.ItemOnPromotion> GetItemPromoAsync(int PromoID) {
            return base.Channel.GetItemPromoAsync(PromoID);
        }
        
        public bool AddItemOnPromotion(int Itemcode, int PromoID) {
            return base.Channel.AddItemOnPromotion(Itemcode, PromoID);
        }
        
        public System.Threading.Tasks.Task<bool> AddItemOnPromotionAsync(int Itemcode, int PromoID) {
            return base.Channel.AddItemOnPromotionAsync(Itemcode, PromoID);
        }
        
        public bool EditPromotionStatus(int PromID, string startdate, string enddate) {
            return base.Channel.EditPromotionStatus(PromID, startdate, enddate);
        }
        
        public System.Threading.Tasks.Task<bool> EditPromotionStatusAsync(int PromID, string startdate, string enddate) {
            return base.Channel.EditPromotionStatusAsync(PromID, startdate, enddate);
        }
        
        public OneShot.com.ServiceReference1.CategoryTbl GetCategory(string catName) {
            return base.Channel.GetCategory(catName);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.CategoryTbl> GetCategoryAsync(string catName) {
            return base.Channel.GetCategoryAsync(catName);
        }
        
        public OneShot.com.ServiceReference1.ItemOnPromotion[] GetItemOnPromotions(int PromoID) {
            return base.Channel.GetItemOnPromotions(PromoID);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.ItemOnPromotion[]> GetItemOnPromotionsAsync(int PromoID) {
            return base.Channel.GetItemOnPromotionsAsync(PromoID);
        }
        
        public bool UpdateAddress(string userID, string newAddress) {
            return base.Channel.UpdateAddress(userID, newAddress);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAddressAsync(string userID, string newAddress) {
            return base.Channel.UpdateAddressAsync(userID, newAddress);
        }
        
        public bool addItemReview(string userid, int itemcode, string review, string reviewdate, int stars) {
            return base.Channel.addItemReview(userid, itemcode, review, reviewdate, stars);
        }
        
        public System.Threading.Tasks.Task<bool> addItemReviewAsync(string userid, int itemcode, string review, string reviewdate, int stars) {
            return base.Channel.addItemReviewAsync(userid, itemcode, review, reviewdate, stars);
        }
        
        public bool ADDNEWReview(string userid, int itemcode, string review, string reviewdate, int stars) {
            return base.Channel.ADDNEWReview(userid, itemcode, review, reviewdate, stars);
        }
        
        public System.Threading.Tasks.Task<bool> ADDNEWReviewAsync(string userid, int itemcode, string review, string reviewdate, int stars) {
            return base.Channel.ADDNEWReviewAsync(userid, itemcode, review, reviewdate, stars);
        }
        
        public OneShot.com.ServiceReference1.ItemReview[] GetReviews(int itemcode) {
            return base.Channel.GetReviews(itemcode);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.ItemReview[]> GetReviewsAsync(int itemcode) {
            return base.Channel.GetReviewsAsync(itemcode);
        }
        
        public bool AddVisitor(string month) {
            return base.Channel.AddVisitor(month);
        }
        
        public System.Threading.Tasks.Task<bool> AddVisitorAsync(string month) {
            return base.Channel.AddVisitorAsync(month);
        }
        
        public bool AddRegisteredUser(string month) {
            return base.Channel.AddRegisteredUser(month);
        }
        
        public System.Threading.Tasks.Task<bool> AddRegisteredUserAsync(string month) {
            return base.Channel.AddRegisteredUserAsync(month);
        }
        
        public bool AddOderedUser(string month) {
            return base.Channel.AddOderedUser(month);
        }
        
        public System.Threading.Tasks.Task<bool> AddOderedUserAsync(string month) {
            return base.Channel.AddOderedUserAsync(month);
        }
        
        public bool addItemOnList(int itemcode, string userid) {
            return base.Channel.addItemOnList(itemcode, userid);
        }
        
        public System.Threading.Tasks.Task<bool> addItemOnListAsync(int itemcode, string userid) {
            return base.Channel.addItemOnListAsync(itemcode, userid);
        }
        
        public OneShot.com.ServiceReference1.CustomerList[] GetCustomerList(string userID) {
            return base.Channel.GetCustomerList(userID);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.CustomerList[]> GetCustomerListAsync(string userID) {
            return base.Channel.GetCustomerListAsync(userID);
        }
        
        public bool DeletItemONList(string userid, int itemcode) {
            return base.Channel.DeletItemONList(userid, itemcode);
        }
        
        public System.Threading.Tasks.Task<bool> DeletItemONListAsync(string userid, int itemcode) {
            return base.Channel.DeletItemONListAsync(userid, itemcode);
        }
        
        public OneShot.com.ServiceReference1.CustomerList GetItemOnCust(string userId, int itemcode) {
            return base.Channel.GetItemOnCust(userId, itemcode);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.CustomerList> GetItemOnCustAsync(string userId, int itemcode) {
            return base.Channel.GetItemOnCustAsync(userId, itemcode);
        }
        
        public bool DeleteAllOnList(string userid) {
            return base.Channel.DeleteAllOnList(userid);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAllOnListAsync(string userid) {
            return base.Channel.DeleteAllOnListAsync(userid);
        }
        
        public bool AddCartQty(int itemCode, string userID) {
            return base.Channel.AddCartQty(itemCode, userID);
        }
        
        public System.Threading.Tasks.Task<bool> AddCartQtyAsync(int itemCode, string userID) {
            return base.Channel.AddCartQtyAsync(itemCode, userID);
        }
        
        public bool ADDItemWithQTY(int itemCode, string userID, int qty) {
            return base.Channel.ADDItemWithQTY(itemCode, userID, qty);
        }
        
        public System.Threading.Tasks.Task<bool> ADDItemWithQTYAsync(int itemCode, string userID, int qty) {
            return base.Channel.ADDItemWithQTYAsync(itemCode, userID, qty);
        }
        
        public OneShot.com.ServiceReference1.onCart[] GetOnCart(string userID) {
            return base.Channel.GetOnCart(userID);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.onCart[]> GetOnCartAsync(string userID) {
            return base.Channel.GetOnCartAsync(userID);
        }
        
        public OneShot.com.ServiceReference1.Item[] getItemsonCart(string userID) {
            return base.Channel.getItemsonCart(userID);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Item[]> getItemsonCartAsync(string userID) {
            return base.Channel.getItemsonCartAsync(userID);
        }
        
        public bool ReduceItemQTY(int itemCode, int qty) {
            return base.Channel.ReduceItemQTY(itemCode, qty);
        }
        
        public System.Threading.Tasks.Task<bool> ReduceItemQTYAsync(int itemCode, int qty) {
            return base.Channel.ReduceItemQTYAsync(itemCode, qty);
        }
        
        public bool DeleteItem(int ItemCode, string userID) {
            return base.Channel.DeleteItem(ItemCode, userID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteItemAsync(int ItemCode, string userID) {
            return base.Channel.DeleteItemAsync(ItemCode, userID);
        }
        
        public bool RmoveAllFromCart(string userID) {
            return base.Channel.RmoveAllFromCart(userID);
        }
        
        public System.Threading.Tasks.Task<bool> RmoveAllFromCartAsync(string userID) {
            return base.Channel.RmoveAllFromCartAsync(userID);
        }
        
        public bool MinuesCartQty(int ItemCode, string userID) {
            return base.Channel.MinuesCartQty(ItemCode, userID);
        }
        
        public System.Threading.Tasks.Task<bool> MinuesCartQtyAsync(int ItemCode, string userID) {
            return base.Channel.MinuesCartQtyAsync(ItemCode, userID);
        }
        
        public OneShot.com.ServiceReference1.onCart GetItemOnCart(string userId, int itemCode) {
            return base.Channel.GetItemOnCart(userId, itemCode);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.onCart> GetItemOnCartAsync(string userId, int itemCode) {
            return base.Channel.GetItemOnCartAsync(userId, itemCode);
        }
        
        public string[] GetCategorynames() {
            return base.Channel.GetCategorynames();
        }
        
        public System.Threading.Tasks.Task<string[]> GetCategorynamesAsync() {
            return base.Channel.GetCategorynamesAsync();
        }
        
        public OneShot.com.ServiceReference1.Order[] GetOrders(string userID) {
            return base.Channel.GetOrders(userID);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Order[]> GetOrdersAsync(string userID) {
            return base.Channel.GetOrdersAsync(userID);
        }
        
        public bool AddTransaction(string orderID, string TransDate, double AmountPaid, string transRecipt, int numItems) {
            return base.Channel.AddTransaction(orderID, TransDate, AmountPaid, transRecipt, numItems);
        }
        
        public System.Threading.Tasks.Task<bool> AddTransactionAsync(string orderID, string TransDate, double AmountPaid, string transRecipt, int numItems) {
            return base.Channel.AddTransactionAsync(orderID, TransDate, AmountPaid, transRecipt, numItems);
        }
        
        public OneShot.com.ServiceReference1.Transaction GetUserTransaction(string orderID) {
            return base.Channel.GetUserTransaction(orderID);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Transaction> GetUserTransactionAsync(string orderID) {
            return base.Channel.GetUserTransactionAsync(orderID);
        }
        
        public OneShot.com.ServiceReference1.Transaction[] GetTransactions() {
            return base.Channel.GetTransactions();
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Transaction[]> GetTransactionsAsync() {
            return base.Channel.GetTransactionsAsync();
        }
        
        public bool AddOrder(string OrderID, string userID, string orderDate, string EstimatedDelDate, string orderStatus) {
            return base.Channel.AddOrder(OrderID, userID, orderDate, EstimatedDelDate, orderStatus);
        }
        
        public System.Threading.Tasks.Task<bool> AddOrderAsync(string OrderID, string userID, string orderDate, string EstimatedDelDate, string orderStatus) {
            return base.Channel.AddOrderAsync(OrderID, userID, orderDate, EstimatedDelDate, orderStatus);
        }
        
        public bool AddItemOnOrder(string OrderID, int itemCode, int qty, double ItemTotal) {
            return base.Channel.AddItemOnOrder(OrderID, itemCode, qty, ItemTotal);
        }
        
        public System.Threading.Tasks.Task<bool> AddItemOnOrderAsync(string OrderID, int itemCode, int qty, double ItemTotal) {
            return base.Channel.AddItemOnOrderAsync(OrderID, itemCode, qty, ItemTotal);
        }
        
        public bool UpdateOrderStatus(string newStatus, string userID, string orderID) {
            return base.Channel.UpdateOrderStatus(newStatus, userID, orderID);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateOrderStatusAsync(string newStatus, string userID, string orderID) {
            return base.Channel.UpdateOrderStatusAsync(newStatus, userID, orderID);
        }
        
        public OneShot.com.ServiceReference1.Item[] GetItemsOnOrder(string userid) {
            return base.Channel.GetItemsOnOrder(userid);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Item[]> GetItemsOnOrderAsync(string userid) {
            return base.Channel.GetItemsOnOrderAsync(userid);
        }
        
        public OneShot.com.ServiceReference1.Order[] GetAllOrders() {
            return base.Channel.GetAllOrders();
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Order[]> GetAllOrdersAsync() {
            return base.Channel.GetAllOrdersAsync();
        }
        
        public OneShot.com.ServiceReference1.Order GetOrderByID(string orderID) {
            return base.Channel.GetOrderByID(orderID);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Order> GetOrderByIDAsync(string orderID) {
            return base.Channel.GetOrderByIDAsync(orderID);
        }
        
        public OneShot.com.ServiceReference1.Transaction GetTransaction(string orderID) {
            return base.Channel.GetTransaction(orderID);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Transaction> GetTransactionAsync(string orderID) {
            return base.Channel.GetTransactionAsync(orderID);
        }
        
        public OneShot.com.ServiceReference1.CustomerMessage[] GetMessages(string userID) {
            return base.Channel.GetMessages(userID);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.CustomerMessage[]> GetMessagesAsync(string userID) {
            return base.Channel.GetMessagesAsync(userID);
        }
        
        public bool NewMessage(string userID, string message, string sender) {
            return base.Channel.NewMessage(userID, message, sender);
        }
        
        public System.Threading.Tasks.Task<bool> NewMessageAsync(string userID, string message, string sender) {
            return base.Channel.NewMessageAsync(userID, message, sender);
        }
        
        public void UpdateMessageStatus(string userID) {
            base.Channel.UpdateMessageStatus(userID);
        }
        
        public System.Threading.Tasks.Task UpdateMessageStatusAsync(string userID) {
            return base.Channel.UpdateMessageStatusAsync(userID);
        }
        
        public OneShot.com.ServiceReference1.CustomerMessage[] GetMessagesDisplay() {
            return base.Channel.GetMessagesDisplay();
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.CustomerMessage[]> GetMessagesDisplayAsync() {
            return base.Channel.GetMessagesDisplayAsync();
        }
        
        public bool ClearList(string userID) {
            return base.Channel.ClearList(userID);
        }
        
        public System.Threading.Tasks.Task<bool> ClearListAsync(string userID) {
            return base.Channel.ClearListAsync(userID);
        }
        
        public bool IsRegistered(string email) {
            return base.Channel.IsRegistered(email);
        }
        
        public System.Threading.Tasks.Task<bool> IsRegisteredAsync(string email) {
            return base.Channel.IsRegisteredAsync(email);
        }
        
        public bool UserIDRegistered(string ID) {
            return base.Channel.UserIDRegistered(ID);
        }
        
        public System.Threading.Tasks.Task<bool> UserIDRegisteredAsync(string ID) {
            return base.Channel.UserIDRegisteredAsync(ID);
        }
        
        public OneShot.com.ServiceReference1.Item[] GetItemsONcustomerList(string userID) {
            return base.Channel.GetItemsONcustomerList(userID);
        }
        
        public System.Threading.Tasks.Task<OneShot.com.ServiceReference1.Item[]> GetItemsONcustomerListAsync(string userID) {
            return base.Channel.GetItemsONcustomerListAsync(userID);
        }
        
        public bool EditPromoStatus(int promoID, string newS) {
            return base.Channel.EditPromoStatus(promoID, newS);
        }
        
        public System.Threading.Tasks.Task<bool> EditPromoStatusAsync(int promoID, string newS) {
            return base.Channel.EditPromoStatusAsync(promoID, newS);
        }
    }
}
